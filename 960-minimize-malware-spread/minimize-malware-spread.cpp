class Solution {
private:
    void dfs(unordered_map<int,int> &mp,unordered_map<int,vector<int>> &graph,int node,vector<int> &visited,int &count)
    {
        visited[node]=1;
        count++;
        for(auto x: graph[node])
        {

            if(visited[x]==0)
            {

                if(mp[x]){
                    count=INT_MIN;
                }
                
                dfs(mp,graph,x,visited,count);
            }

        }
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        unordered_map<int,int> mp;
        unordered_map<int,vector<int>> adj;
        int n=graph.size();
        for(int i=0;i<initial.size();i++)
        {
            mp[initial[i]]=1;
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<graph[i].size();j++)
            {
                if(graph[i][j]==1)
                {
                    int u=i;
                    int v=j;
                    adj[u].push_back(v);
                    adj[v].push_back(u);
                }
            }
        }
        int maxi=INT_MIN;
        int index;
        vector<int> visited(n,0);
        for(int i=0;i<initial.size();i++)
        {
            int node=initial[i];
            int count=0;
            if(visited[node]==0){
                mp.erase(node);
                dfs(mp,adj,node,visited,count);
                if(count<0) count=0;
            }
            if(maxi<count){
                index=initial[i];
                maxi=count;
            }
            else if(maxi==count && index>initial[i])
            {
                index=initial[i];
            }
        }
        return index;
    }
};